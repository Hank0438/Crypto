

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2)
import binascii

# open the public key and strip the spaces so we have a decent array
fileKey = open("pubKey.txt", 'rb')
pubKey = fileKey.read().replace(b' ', b'').replace(b'L',b'').split(b',')
nbit = len(pubKey)
# open the encoded message
fileEnc = open("enc.txt", 'rb')
encoded = fileEnc.read().replace(b'L',b'')
print("start")
# create a large matrix of 0's (dimensions are public key length +1)
A = Matrix(ZZ,nbit+_sage_const_1 ,nbit+_sage_const_1 )
# fill in the identity matrix
for i in range(nbit):
    A[i,i] = _sage_const_1 
# replace the bottom row with your public key
for i in range(nbit):
    A[i,nbit] = pubKey[i]
# last element is the encoded message
A[nbit,nbit] = -int(encoded)



res = A.LLL()
# resfil = open("res.txt", 'wb')
# resfil.write(res)

# print solution
# M = res.row(295).list()
# print(M)

for i in range(_sage_const_0 , nbit + _sage_const_1 ):
    # print solution
    M = res.row(i).list()
    flag = True
    for m in M:
        if m != _sage_const_0  and m != _sage_const_1 :
            flag = False
            break
    if flag:
        print(i, M)
        M = ''.join(str(j) for j in M)
        # remove the last bit
        M = M[:-_sage_const_1 ]
        M = hex(int(M, _sage_const_2 ))[_sage_const_2 :]
        print(M)
        print(binascii.unhexlify(M))

