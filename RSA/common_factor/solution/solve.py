from Crypto.Util.number import getPrime, inverse


e = 65537
N1 = 6895845544260868602153839206969183951361187663952858151133857760475619823332834280558644975021459616230784418671307086470467095243024090311292632205567203
N2 = 9550710348035404629674189965581672285201858649079421717850151760606830125384958711526672972581690326412578395430258260246011927558975990003679075022652129
c1 = 5807369706612986253153290657736961536443527048744145582160247257860312720545333794676258071898213543742536028317134094595560393205919222182015852949827617
c2 = 7862835985660621064455409684985199037082617555138622133888575861893510339973228228994276929896677466520310161182009595998890529851979161921292082894957070


def gcd(num1, num2):
    """
    This function os used to find the GCD of 2 numbers.
    :param num1:
    :param num2:
    :return:
    """
    if num1 < num2:
        num1, num2 = num2, num1
    while num2 != 0:
        num1, num2 = num2, num1 % num2
    return num1

q = gcd(N1,N2)
p1 = N1 // q
p2 = N2 // q


d1 = inverse(e, (p1-1)*(q-1))
m = pow(c1, d1, N1)
print("Plain Text: ", m.to_bytes(0x40, byteorder='big').strip(b'\x00'))