

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_16 = Integer(16); _sage_const_0 = Integer(0); _sage_const_60259696438802824739601125817242188146078891917629227205809157440421934320057 = Integer(60259696438802824739601125817242188146078891917629227205809157440421934320057); _sage_const_3 = Integer(3); _sage_const_54628725427538455885247976318697353582883460531963823959596505967156861036432 = Integer(54628725427538455885247976318697353582883460531963823959596505967156861036432); _sage_const_1 = Integer(1); _sage_const_30 = Integer(30)
import time
import sys


def long_to_bytes(data):
    data = str(hex(int(data)))[_sage_const_2 :]
    return "".join([chr(int(data[i:i + _sage_const_2 ], _sage_const_16 )) for i in range(_sage_const_0 , len(data), _sage_const_2 )])
    


def main():
    N = _sage_const_60259696438802824739601125817242188146078891917629227205809157440421934320057 
    e = _sage_const_3 
    c = _sage_const_54628725427538455885247976318697353582883460531963823959596505967156861036432 
    m = int.from_bytes(b"Your PIN code is \x00\x00\x00\x00", byteorder='big')
    P = PolynomialRing(Zmod(N), implementation='NTL', names=('x',)); (x,) = P._first_ngens(1)
    pol = (m + x)**e - c
    roots = pol.small_roots(epsilon=_sage_const_1 /_sage_const_30 )
    print("Potential solutions:")
    for root in roots:
       print(root, long_to_bytes(m+root))
	
main()

