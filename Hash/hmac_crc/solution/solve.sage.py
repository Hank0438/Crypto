

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0x3636363636363636 = Integer(0x3636363636363636); _sage_const_0x5c5c5c5c5c5c5c5c = Integer(0x5c5c5c5c5c5c5c5c); _sage_const_64 = Integer(64); _sage_const_0xeff67c77d13835f7 = Integer(0xeff67c77d13835f7); _sage_const_0xabaddeadbeef1dea = Integer(0xabaddeadbeef1dea); _sage_const_0x14e9860ad30728a3 = Integer(0x14e9860ad30728a3); _sage_const_88 = Integer(88); _sage_const_128 = Integer(128)# from sage.all import import *

def ntopoly(npoly):
        return sum(c*X**e for e, c in enumerate(Integer(npoly).bits()))

def polyton(poly):
        return sum(int(poly[i])*(_sage_const_1  << i) for i in range(poly.degree() + _sage_const_1 ))

X = GF(_sage_const_2 ).polynomial_ring().gen()

INNER = ntopoly(_sage_const_0x3636363636363636 )
OUTER = ntopoly(_sage_const_0x5c5c5c5c5c5c5c5c )
CRC_POLY = ntopoly((_sage_const_2 **_sage_const_64 ) + _sage_const_0xeff67c77d13835f7 )
CONST = ntopoly(_sage_const_0xabaddeadbeef1dea )
HMAC_CRC = ntopoly(_sage_const_0x14e9860ad30728a3 )
m = ntopoly(int.from_bytes(b"zupe zecret", byteorder='big'))
M = _sage_const_88 

k = (HMAC_CRC - (OUTER*X**_sage_const_128  + INNER*X**(M+_sage_const_128 ) + m*X**_sage_const_128  + CONST*(X**_sage_const_64 +_sage_const_1 )))
k = k * inverse_mod(X**_sage_const_128  + X**(M+_sage_const_128 ), CRC_POLY)
k = k % CRC_POLY



print(hex(polyton(k)))


